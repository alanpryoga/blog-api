// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	entity "github.com/alanpryoga/blog-api/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockdbRepoProvider is a mock of dbRepoProvider interface.
type MockdbRepoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockdbRepoProviderMockRecorder
}

// MockdbRepoProviderMockRecorder is the mock recorder for MockdbRepoProvider.
type MockdbRepoProviderMockRecorder struct {
	mock *MockdbRepoProvider
}

// NewMockdbRepoProvider creates a new mock instance.
func NewMockdbRepoProvider(ctrl *gomock.Controller) *MockdbRepoProvider {
	mock := &MockdbRepoProvider{ctrl: ctrl}
	mock.recorder = &MockdbRepoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbRepoProvider) EXPECT() *MockdbRepoProviderMockRecorder {
	return m.recorder
}

// FindUserByID mocks base method.
func (m *MockdbRepoProvider) FindUserByID(ctx context.Context, id int32) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockdbRepoProviderMockRecorder) FindUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockdbRepoProvider)(nil).FindUserByID), ctx, id)
}
